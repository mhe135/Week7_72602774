---
title: "GIS_New_Zealand_Map"
format: html
editor: visual
---

```{r include=FALSE}
# Set a CRAN mirror
options(repos = c(CRAN = "https://cran.rstudio.com/"))
library(plotly)
library(sf)
library(dplyr)
library(RColorBrewer)
#library(ggplot)
#library(ggplotly)
```

## Basic Map

```{r}
#| echo: false
library(leaflet)
# Create a basic map of New Zealand
nz_map <- leaflet() %>%
  addTiles() %>%
  setView(lng = 174.8860, lat = -40.9006, zoom = 5)  # Coordinates of New Zealand
nz_map

```

\## Adding Markers

```{r}
#| echo: false
# New Zealand maps for three cities.
nz_cities <- data.frame(
  city = c("Auckland", "Wellington", "Christchurch"),
  lat = c(-36.8485, -41.2865, -43.5321),
  lng = c(174.7633, 174.7762, 172.6362),
  population = c(1626000, 215900, 381500)
)

# Add markers with title
nz_map_pop <- leaflet(nz_cities) %>%
  addProviderTiles("CartoDB.Positron") %>%
  setView(lng = 174.8860, lat = -40.9006, zoom = 5) %>%
  addMarkers(~lng, ~lat, popup = ~paste(city, "<br>Population:", population))

nz_map_pop

```

## Heatmap

### Choropleth Map

```{r}
#| echo: false
library(leaflet.extras)
# Create a heatmap by survey data of population
nz_map_heatmap <- leaflet(nz_cities) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addHeatmap(lng = ~lng, lat = ~lat, intensity = ~population, blur = 20, max = 1, radius = 15)

nz_map_heatmap

```

## Read a.geoJSON file

```{r}
#| echo: false
library(sf)
library(dplyr)
# Create path to read geojson file
nz_geojson <- st_read("~/Desktop/nz_ta.geojson")
#print.data.frame(nz_geojson)
#clean data by rename the col name to a readable name for furthur merge operation in task7.
nz_geojson <- nz_geojson %>%
  rename(region = TA2016_NAM ) %>%
  select(region)
 
#summary(nz_geojson$region)
#summary(nz_geojson$TA2016_NAM)

```

## Create a black and white plot for regions

```{r}
#| echo: false
library(ggplot2)
# Black and white plot of NZ territories
ggplot(nz_geojson) +
  geom_sf() +
  theme_void()

```

## Load numeric data

```{r}
#| echo: false
#install.packages("dplyr")

library(dplyr)
# Load 2016 population data
nz_population <- read.csv("~/Desktop/nz_territory_2016_population.csv")  
#print(nz_population)
# Clean data,change column name of raw data to a readable name
nz_population <- nz_population %>%
  rename(territory = nz_territory, 
         population= X2016_population) %>%
  select(territory, population)
 
# Check the distribution
#summary(nz_population$population)
ggplot(nz_population, aes(x = reorder(territory, -population), y = population)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Population Distribution by Territory ", 
       x = "Territory", 
       y = "Population") +
  scale_y_continuous(labels = scales::comma) +  
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
        plot.title = element_text(hjust = 0.5)) 
```

```{r}
#| echo: false
# Merge geospatial and numeric data
# Standardize the names by change to lowercase

nz_population$territory <- trimws(tolower(nz_population$territory))
nz_geojson$region<- trimws(tolower(nz_geojson$region)) 

# Perform the left join again
nz_merged <- dplyr::left_join(nz_geojson, nz_population, by = c("region" = "territory"))

nz_merged <- nz_merged %>% filter(!is.na(population))

```

## Basic choropleth

```{r}
#| echo: false
# Generate first choropleth map with non-transformed population count
ggplot(nz_merged) +
  geom_sf(aes(fill = population)) +
  theme_void()

```

## Improved choropleth map

```{r}
#| echo: false

# Generate first choropleth map with non-transformed population count
# Enhanced choropleth map
nz_plot <- ggplot(nz_merged) +
  geom_sf(aes(fill = log(population))) +
  scale_fill_viridis_c() +
  labs(title = "Population Density of New Zealand Territories",
       subtitle = "Log-transformed Population Data",
       caption = "Source: StatsNZ") +
  theme_void() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12),
    plot.caption = element_text(size = 10)
  )

# View plot
nz_plot

# Save the plot in png format
ggsave("nz_plot.png")
## Extra
```

## Extra

```{r warning=FALSE}
#| echo: false
library(plotly)
library(sf)
library(dplyr)
library(RColorBrewer)
# Create the choropleth map with tooltips
nz_plot <- ggplot(nz_merged) +  
  geom_sf(aes(fill = log(population), 
              text = paste("Territory:", region, "<br>Log Population:", log(population)))) +  # Add text aesthetic for tooltips
  theme_void() +  # Remove the default axes, labels, and grid lines for a cleaner map
  scale_fill_viridis_c(option = "C", name = "Log Population", direction = -1) +  # Reverse color scale for light-to-dark
  labs(
    title = "Enhanced Choropleth Map",  # Title of the map
    subtitle = "Log-transformed Population",  # Subtitle providing additional context
    caption = "Source: StatsNZ"  # Caption to credit data source
  )

# Convert ggplot to an interactive plotly plot
nz_map_interactive <- ggplotly(nz_plot, tooltip = "text")  # Ensure "text" aesthetic exists in the plot

# Customize the layout of the interactive map
nz_map_interactive <- nz_map_interactive %>% 
  layout(
    title = list(text = "<b>New Zealand Population Choropleth Map</b>", font = list(size = 20)),
    font = list(family = "Arial", color = "black"),
    plot_bgcolor = "white",
    paper_bgcolor = "white"
  )
# Display the plot
nz_map_interactive

```
